x$Ozone[bad]
x$Ozone[!bad]
mean(x$Ozone[!bad])
mean(x$Ozone)
head(X)
x <- read.csv("hw1_data.csv")
x
head(x)
[x$Month > 6]
month <- x[x$Month > 6]
solarMean <- subset(x, x$Ozone > 31)
solarMean
head(solarMean)
solarMean <- subset(x, x$Ozone > 31, x$Temp > 90)
solarMean <- subset(x, x$Ozone > 31 &x$Temp > 90)
solarMean <- subset(x, x$Ozone > 31 & x$Temp > 90)
head(solarMean)
solarMean
mean(solarMean$Ozone)
mean(solarMean$Solar.R)
tempMean <- subset(x, x$Month = 6)
tempMean <- subset(x, x$Month == 6)
head(tempMean)
mean(tempMean$Temp)
max(x$Ozone)
max(subset(x$Ozone, x$Month == 5))
max(subset(na.omit(x$Ozone), x$Month == 5))
R.version
R.version.string
install.packages("swirl")
library("swirl")
ls()
rm(list = ls())
ls()
library("swirl")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install_from_swirl("R Programming")
library(httr)
install_course_zip(file.choose(), multi = TRUE, which_course = "R Programming")
swirl()
5+8
5+7
x <- 7+5
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
rm(ls(list()))
rm(list = ls())
rm(list = ls())
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir <- ls()
getwd()
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir")
setwd(old.dir)
setwd("testdir/")
file.create(mytest.R)
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
list.files()
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2/")
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:25
1:20
1:20555555555555
memory.size()
pi:10
15:1
?":"
seq(1:10)
seq(1:20)
seq(1, 20)
seq(0, 10, by = 0.5)
seq(0, 10, length(30))
my_seq <- seq(0, 10, length(30))
my_seq <- seq(0, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10
)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
num_vect
num_vect < 1
tf <- num_vect < 1
tf
x <- num_vect >= 6
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste((my_char, collapse = " "))
paste(my_char, collapse = " ")
my_name <- c(my_char, "ZuluagaSD")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"))
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
?sample
my_data
my_na <- is.na(my_data)
my_na
my_date == NA
my_date == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
swirl()
info()
bye()
ls()
rm(list = ls())
ls()
bye()
swirl()
2
bye()
swirl()
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_date == NA
my_data == NA
sum(my_data)
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[3, 5, 7]
x[c(3, 5, 7)]
x[0]
x[3000]
x[C(!2, !10)]
x[C(-2, -10)]
x[c(!2, !10)]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2,
| norf = NA)
vect <- c(foo = 11, bar = 2, norf = NA).
vect <- c(foo = 11, bar = 2, norf = NA)
vect
?"names"
names(x)
names(vect)
vect2 <- C(11, 2, NA)
vect2 <- c(11, 2, NA)
vect2
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["2"]
vect[bar]
vect["2"]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
rm(list = ls())
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
?dim
length(my_vector)
dim(my_vector) <- c(4, 5)
View(my_vector)
View(my_vector)
View(my_vector)
View(my_vector)
dim(my_vector)
attributes(my_vector)
View(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames()
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
View(my_data)
View(my_data)
View(my_data)
if (x > 3) {
y <- 10
} else {
y <- 0
}
x <- 4
if (x > 3) {
y <- 10
} else {
y <- 0
}
y
y <- if (x > 3) {
10
} else {
0
}
y
if (x > 3) {
y <- 10
} else {
y <- 0
}
print(y)
for (i in 1:10) {
print(i)
}
x <- c("a", "b", "c", "d")
for (i in 1:4) {
print(x[i])
}
rm(llist = ls())
rm(list = ls())
x <- c("a", "b", "c", "d")
for (i in 1:4) {
print(x[i])
}
for (i in seq_along(x)) {
print(x[i])
}
for (letter in x) {
print(x[i])
}
for (letter in x) {
print(x[letter])
}
rm(list = ls())
x <- c("a", "b", "c", "d")
for (letter in x) {
print(x[letter])
}
for (letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
x <- matrix(1:6, 2, 3)
for (i in seq_len(nrow(x))) {
for (j in seq_len(ncol(x))) {
print(x[i, j])
}
}
View(x)
count <- 0
while (count < 10) {
print(count)
count <- count + 1
}
?rbinom
z <- 5
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
print(z)
}
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
z <- 5
counter <- 0
while (z >= 3 && z <= 10) {
print(z)
coin <- rbinom(1, 1, 0.5)
if (coin == 1) { ## Random Walk
z <- z + 1
} else {
z <- z - 1
}
counter <- counter + 1
print(z)
}
print(counter)
rm(list = ls())
add2 <- function(x, y) {
x + y
}
add2(2+3)
add2 <- function(x, y) {
x + y
}
add2(3, 2)
add2(3, 10000)
above <- function(x, n) {
use <- x > n
x[use]
}
above(1:20, 10)
above(1:20, 12)
above <- function(x, n = 10) {
use <- x > n
x[use]
}
above(1:20, 12)
above(1:20)
above(1:20, 50)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
View(columnmean)
rm(list = ls())
args(lm)
args(paste)
lm <- function(x) {x * x}
lm
searc()
search()
?c
f <- function(x, y) {
x^2 + y / z
}
?ls
x <- as.Date("2070-01-01")
